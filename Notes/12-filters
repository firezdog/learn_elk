Subject of this lecture is the filter context
It is similar to query context syntactically but not used in the same way

GET /courses/_search
{
    "filter": {
        "match": {"name": "accounting"}
    }
}

^ will not work -- "query" is expected to be the first item

GET /courses/_search
{
    "query": {
        "filter": {
            "match": {"name": "accounting"}
        }
    }
}

^ better, but a legitimate query is needed, e.g. "bool"

GET /courses/_search
{
    "query": {
        "bool": {
            "filter": {
                "match": {"name": "accounting"}
            }
        }
    }
}

^ valid for ES 6
what does this do?  my guess is that it retrieves ALL the results but then discards those that don't match the filter.  (so then the question would become why have a filter IN ADDITION TO a query)

what is the distinction then?
    max scores is 0?!
    filter does not score by relevancy -- more traditional db query (so I was wrong)
    filters are cached and will run more quickly the second time
        query does not cache because it has to calculate relevancy (?)
    otherwise a filter does everything a query does
we can nest a bool in a filter, e.g. of those filtered, they must be taught by bill
we can also have a "must" under a query in addition to a filter -- this will not be in the filter context and docs will get scored
    so how do we know which docs are in there because of the filter and which are in there because of the query?
    do filters use "should"?
from experimentation, it seems like the filter does in fact limit the query -- for instance, you get fewer matches with a "should match: name = science" filter under a "must match: nmae = computer" -- but they are scored
filters can also take range
field boosting: altering the relevance score assigned to docs based on importance of a field
    use ^ after field name (e.g. in a multi-match)
takeaways
    syntax between filter and query is very similar
        bools, multi-match, should, must, etc.
    filters are going to be faster than queries