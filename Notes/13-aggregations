Aggregations -- most powerful feature of ES
Seed data
    Bulk indexing
    note: generic query only shows the top 10 docs
        add "size" to get the number you want
        "from" defines pagination (mod using size)
        "sort"
            can sort by e.g. price
        in terms of sorting vs. pagination what happens first?
            we get documents first (query) then sort them (entire result set)
    About the data
        id was auto-generated
        price
        make
        date sold
        condition (new, good, etc.)
        color
Aggregations Intro
    data analytics -- gain insight into your data
    summarization
        large corporation: which state has the great no. employees, percentage male vs. female, what year did employees receive highest bonus per state
        like GROUPBY (bucketing of data)
        faster than a relational database -- allows search and big-data processing at scale
    example
        query for all vehicles with dodge make
        use the _count endpoint to get the number of results -- basic aggregation
        but we can also do this with an aggregation query
            aggs of "popular_cars" with terms for field make.keyword
                result will come back in "buckets" with the different makes
                make.keyword is needed for an aggregation to explain how to deal with the text
                    "Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [make] in order to load field data by uninverting the inverted index. Note that this can use significant memory."
                    keyword indicates we want the exact value
    what about the average price of a given make?
        see in "Commands" -- notice (1) that the second aggregation needs to be nested under the first (aggregation of an aggregation) and (2) we do not need "price.keyword" because it is not text
        we could also find minimum price, maximum price, etc.
            max
            min
        each aggregation must be separate -- we can't put two aggregation fields under one name apparently
        every request shows the hits, which can be annoying if we don't care about the actual 
            use size = 0 to eliminate the hits from the results
        data
            use may be related to a query combined with an agg, so that the agg is limited to the query