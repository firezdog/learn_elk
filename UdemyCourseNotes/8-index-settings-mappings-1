Index is a logical rep of data, where the actual data resides on disk in shards
In terms of the logical rep, how do we create an index and define the docs that the index will accept?
    alternative -- ES infers the structure (not preferred)
example: "Customers"
    PUT /customers { <structure: settings, mappings> }
    settings
        number_of_shards (default to 5)
        number_of_replicas
    mappings -- define fields / types for index (will be removed in future versions)
        first entry is the name for the mapping (do we need this still? can we use _doc? -- in fact you can just leave it out)
        contains "properties"
            <property_name>: { type, analyzer (e.g. standard) }
                remember the analyzer is responsible for tokenization etc.
                standard analyzer splits the text on whitespace and lower-cases
            customer fields might be 
                gender (text), 
                age (integer) -- no analyzer needed, 
                total_spent (float) -- no analyzer needed
                is_new (boolean)
                name (text)
        ES does NOT enforce the mapping
    you cannot overwrite an index with a new PUT unless you DELETE first