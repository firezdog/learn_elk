review: bool => must => array (match)
    must not
    we can use must to match all classes named accounting in room E3
    we can further refine to exclude certain cases with must_not
"should" / "should_not"
    gives a higher score to something if it is there, but does not require it? (yes, based on experiments a full point higher)
    minimum_should_match is enforced, whereas should alone is not (minimum_should_match: <int>)
    applied at the level of bool
    contrary to the lecture, match on a field does not require an exact match
"multi_match"
    .query.multi_match
        .fields (list of fields)
        .query (what we want to search for)
    hire relevance if the query is found in more of the specified fields
"match_phrase"
    match sentence or part of sentence (how is this different from "match", given that "match" does not need to be exact?)
    doesn't work if you break a token (match is the same way, e.g. computer vs. comp)
"match_phrase_prefix"
    doesn't require full tokens -- but does require full leads (e.g. comp matches computer vs. mput does not)
"range"
    for docs that exist within a given range
    range.field
    range.gte -- >=
    range.lte -- <=
    range.gt -- >
    range.lt -- <
    we can also do dates in format e.g. 2012-10-13
queries are built up recursively (tree)
    query => bool => (must match name accounting, must_not match room E7, should range field students_enrolled gte 10)
json editor (or vs code) can help with json formatting (but not dsl errors)

in general it seems "must" is binary, whereas "should" is in terms of score