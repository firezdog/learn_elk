Use the seed data from `./Examples/10-course-data`
GET courses gives us the mapping
    "professor" is an object field with its own properties (_doc's are in some sense "recursive")
Querying ES
    ES is JSON via an HTTP (REST) interface
    DSL -- domain specific language -- for ES uses JSON
    now we cover how ES queries work
    objective: match search criteria with relevance
        many docs may contain the word "technology" -- but some may be "better" matches than others
        more relevant results can be displayed first (this is the heart of ES)
Search DSL Syntax
    query context vs. filter context
        query: what to match and how well does it match
        filter: coming (guess: of the results that were retrieved, which should we return)
        both can be combined to form a single search
    match_all: empty version will give us all docs (this is actually the same as just hitting the _search endpoint)
        _score field returned for each doc -- relevancy score
        since our search is just match_all, all docs with have the same relevancy
    match
        particular value for given field
        specify the field and its value
        now we see a difference in scores, indicating greater relevancy (ES algorithm) -- it might be for instance how much the given word dominates the field (length of the given word as a sub-string)
        documentation gives more information about how ES calculates relevancy
    exists
        note one of the docs has an empty email field -- how do we find the doc with an empty email or docs that are not empty?
            using dot notation for sub-fields (professor.email)
            { "field": {field} }
        but exists checks whether the field exists regardless of its value!
    must
        matching on multiple criteria is possible but we cannot use two matches
        array
    bool
        needed to wrap must/should